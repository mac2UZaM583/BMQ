import requests
from bs4 import BeautifulSoup
import time
from datetime import datetime
from name import get_balance, get_tickers, place_order
import asyncio

headers = {'User-Agent': 'Opera/9.80 (Windows NT 6.2; WOW64) Presto/2.12.388 Version/12.17'}
url_count = 718

# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
tp = 0.005
sl = 0.005

# –û—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
start_time = time.time()
i = 0

async def main():
    global url_count, i
    while True:
        try:

            while True:
                try:
                    elapsed_time = time.time() - start_time
                    url = 'https://t.me/pump_dump_screener_demo/' + str(url_count)

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ http –∑–∞–ø—Ä–æ—Å–∞
                    try:
                        response = requests.get(url, headers)
                    except:
                        print('–æ—à–∏–±–∫–∞. –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞/–≤—Ä–µ–º—è: ', datetime.now())
                        response = requests.get(url, headers)
                    soup = BeautifulSoup(response.text, 'lxml')
                    data = soup.find_all('meta')

                    # –ò—Å—Ö–æ–¥—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—É —Å—Ç–∞–≤–∫–∏
                    for content in data:
                        if 'üî¥' in str(content) or 'üü¢' in str(content):
                            elements = str(content).split()
                            ticker = str(elements[1][11:-1] + 'USDT')
                            url_count += 1
                            tickers = await get_tickers()
                            balance_usdt = await get_balance()
                            print(balance_usdt)

                            if str(content).count('üî¥') == 1:
                                if ticker in tickers and balance_usdt != 0:
                                    await place_order(ticker, 1, int((float(balance_usdt) - 5) * 10), tp, sl)
                                    print(datetime.now())

                            if str(content).count('üü¢') == 1:
                                if ticker in tickers and balance_usdt != 0:
                                    await place_order(ticker, 0, int((float(balance_usdt) - 5) * 10), tp, sl)
                                    print(datetime.now())

                            break
                    i += 1
                    print(i, int(elapsed_time))
                except Exception as er:
                    print(er, datetime.now())
        
        except Exception as er:
            print(er)

if __name__ == "__main__":
    asyncio.run(main())
